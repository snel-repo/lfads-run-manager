classdef FitLog < handle
    properties
        runName char = '';
        filename char = '';
        
        step
        total_train
        total_valid
        recon_train
        recon_valid
        kl_train
        kl_valid
        
        l2
        kl_weight
        l2_weight
    end
    
    properties(Dependent)
        nEpochs
        
        lveIndex % which epoch has the lowest validation error
        total_train_lve
        total_valid_lve
        recon_train_lve
        recon_valid_lve
        kl_train_lve
        kl_valid_lve
        l2_lve
    end
    
    methods
        function fitlog = FitLog(csvname, runName)
            fitlog.filename = csvname;
            if nargin < 2
                fitlog.runName = runName;
            end
            % Based of uiimport code auto-generated by MATLAB

            % Initialize variables.
            delimiter = ',';
            startRow = 1;
            endRow = inf;

            % Read columns of data as text:
            formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

            % Open the text file.
            fileID = fopen(csvname,'r');

            % Read columns of data according to the format.
            % This call is based on the structure of the file used to generate this
            % code. If an error occurs for a different file, try regenerating the code
            % from the Import Tool.
            dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
            for block=2:length(startRow)
                frewind(fileID);
                dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
                for col=1:length(dataArray)
                    dataArray{col} = [dataArray{col};dataArrayBlock{col}];
                end
            end

            % Close the text file.
            fclose(fileID);

            % Convert the contents of columns containing numeric text to numbers.
            % Replace non-numeric text with NaN.
            raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
            for col=1:length(dataArray)-1
                raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
            end
            numericData = NaN(size(dataArray{1},1),size(dataArray,2));

            for col=[2,4,6,7,9,10,12,13,14,15,17,18,19]
                % Converts text in the input cell array to numbers. Replaced non-numeric
                % text with NaN.
                rawData = dataArray{col};
                for row=1:size(rawData, 1)
                    % Create a regular expression to detect and remove non-numeric prefixes and
                    % suffixes.
                    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                    try
                        result = regexp(rawData(row), regexstr, 'names');
                        numbers = result.numbers;

                        % Detected commas in non-thousand locations.
                        invalidThousandsSeparator = false;
                        if numbers.contains(',')
                            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                            if isempty(regexp(numbers, thousandsRegExp, 'once'))
                                numbers = NaN;
                                invalidThousandsSeparator = true;
                            end
                        end
                        % Convert numeric text to numbers.
                        if ~invalidThousandsSeparator
                            numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                            numericData(row, col) = numbers{1};
                            raw{row, col} = numbers{1};
                        end
                    catch
                        raw{row, col} = rawData{row};
                    end
                end
            end


            % Split data into numeric and string columns.
            rawNumericColumns = raw(:, [2,4,6,7,9,10,12,13,14,15,17,18,19]);
            rawStringColumns = string(raw(:, [1,3,5,8,11,16]));


            % Make sure any text containing <undefined> is properly converted to an <undefined> categorical
            for catIdx = [1,2,3,4,5,6]
                idx = (rawStringColumns(:, catIdx) == "<undefined>");
                rawStringColumns(idx, catIdx) = "";
            end

            %% Create output variable
            fitlog.step = cell2mat(rawNumericColumns(:, 2));
            fitlog.total_train = cell2mat(rawNumericColumns(:, 3));
            fitlog.total_valid = cell2mat(rawNumericColumns(:, 4));
            fitlog.recon_train = cell2mat(rawNumericColumns(:, 5));
            fitlog.recon_valid = cell2mat(rawNumericColumns(:, 6));
            fitlog.kl_train = cell2mat(rawNumericColumns(:, 7));
            fitlog.kl_valid = cell2mat(rawNumericColumns(:, 8));
            fitlog.l2 = cell2mat(rawNumericColumns(:, 10));
            fitlog.kl_weight = cell2mat(rawNumericColumns(:, 11));
            fitlog.l2_weight = cell2mat(rawNumericColumns(:, 13));
        end
        
        function n = get.nEpochs(fitlog)
            n = numel(fitlog.step);
        end
        
        function idx = get.lveIndex(fitlog)
            eligible = fitlog.kl_weight == 1 & fitlog.l2_weight == 1;
            cost = fitlog.total_valid;
            cost(~eligible) = Inf;
            [~, idx] = min(cost);
        end
        
        function v = get.total_train_lve(fitlog)
            v = fitlog.total_train(fitlog.lveIndex);
        end
        
        function v = get.total_valid_lve(fitlog)
            v = fitlog.total_valid(fitlog.lveIndex);
        end
        
        function v = get.recon_train_lve(fitlog)
            v = fitlog.recon_train(fitlog.lveIndex);
        end
        
        function v = get.recon_valid_lve(fitlog)
            v = fitlog.recon_valid(fitlog.lveIndex);
        end
        
        function v = get.kl_train_lve(fitlog)
            v = fitlog.kl_train(fitlog.lveIndex);
        end
        
        function v = get.kl_valid_lve(fitlog)
            v = fitlog.kl_valid(fitlog.lveIndex);
        end
        
        function v = get.l2_lve(fitlog)
            v = fitlog.l2(fitlog.lveIndex);
        end
    end
end
